/* https://www.w3schools.com/howto/howto_js_filter_lists.asp */
function flexFilterList(searchDiv, filterDiv) {
    var input, filter, table, tr, a, i;
    input = document.getElementById(searchDiv);
    filter = input.value.toUpperCase();
    table = document.getElementById(filterDiv);
    tr = table.getElementsByTagName("tr");
    for (i = 0; i < tr.length; i++) {
        a = tr[i].getElementsByTagName("a")[0];
        if (a === undefined){
          continue;
        } else if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {
            tr[i].style.display = "";
        } else {
            tr[i].style.display = "none";

        }
    }
}


// backward compability - TODO: remove in favor of flexFilterList (= with args)
function filterList() {
    var input, filter, table, tr, a, i;
    input = document.getElementById("search");
    filter = input.value.toUpperCase();
    table = document.getElementById("filterList");
    tr = table.getElementsByTagName("tr");
    for (i = 0; i < tr.length; i++) {
        a = tr[i].getElementsByTagName("a")[0];
        if (a === undefined){
          continue;
        } else if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {
            tr[i].style.display = "";
        } else {
            tr[i].style.display = "none";

        }
    }
}


// backward compability - TODO: remove in favor of flexFilterList (= with args)
function filterList2() {
    var input, filter, table, tr, a, i;
    input = document.getElementById("search2");
    filter = input.value.toUpperCase();
    table = document.getElementById("filterList2");
    tr = table.getElementsByTagName("tr");
    for (i = 0; i < tr.length; i++) {
        a = tr[i].getElementsByTagName("a")[0];
        if (a === undefined){
          continue;
        } else if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {
            tr[i].style.display = "";
        } else {
            tr[i].style.display = "none";

        }
    }
}

function updateShowLevelSpan(val) {
  var span = document.getElementById("showLevelValue");
  span.textContent = '\xa0\xa0\xa0(' + val + ')';
}

function copyCB() {
  var copyText = document.getElementById('cp');
  copyText.select();
  document.execCommand("Copy");
  alert("Copied command: " + copyText.value);
  return false;
}

function copyCB2() {
  /* refactor */
  var copyText = document.getElementById('cp2');
  copyText.select();
  document.execCommand("Copy");
  alert("Copied command: " + copyText.value);
  return false;
}

function copySubmissionToClipBoard() {
  // https://stackoverflow.com/a/38848336
  var sel = editor.selection.toJSON(); // save selection
  editor.selectAll();
  editor.focus();
  document.execCommand('copy');
  editor.selection.fromJSON(sel); // restore selection
  alert('Copied your code to clipboard.');
  return false;
}

function copyTestToClipBoard() {
  var sel = secondEditor.selection.toJSON();
  secondEditor.selectAll();
  secondEditor.focus();
  document.execCommand('copy');
  secondEditor.selection.fromJSON(sel);
  alert('Copied test code to clipboard.');
  return false;
}

function copySolutionToClipBoard() {
  var sel = thirdEditor.selection.toJSON();
  thirdEditor.selectAll();
  thirdEditor.focus();
  document.execCommand('copy');
  thirdEditor.selection.fromJSON(sel);
  alert('Copied solution code to clipboard.');
  return false;
}

function toggle_protocol() {
  var https = 'https://github.com/'
  var ssh = 'git@github.com:'
  var wantSSH  = document.getElementById('protocol').checked === true;
  var input = document.getElementById('cp');
  var val = input.value;
  var newval = '';
  if(wantSSH){
    newval = val.replace(https, ssh);
  } else {
    newval = val.replace(ssh, https);
  }
  input.value = newval;
}

function ConfirmDelete(){
  if(confirm("Sure you want to delete this message?")){
    return true;
  } else {
    return false;
  }
}

function ConfirmDeleteSubmissions(){
  if(confirm("Sure you want to delete all your shared revisions?")){
    return true;
  } else {
    return false;
  }
}

function WarningEmailDelete(){
  if(confirm("Sure you want to delete your email? You will stop receiving platform updates!")){
    return true;
  } else {
    return false;
  }
}
function WarningFinishTimeSheet() {
  if(confirm("Are you sure you want to submit / finalize your timesheet? You cannot edit it after this action.")){
    return true;
  } else {
    return false;
  }
}

function TalkPythonCourseConfirm(){
  if(confirm("Note: This is a Talk Python 100 Days of Code template. Ownership of the course is required to use this template.")){
    return true;
  } else {
    return false;
  }
}

function BitesResetConfirm(){
  if(confirm("Are you sure you want to reset all your Bites? This cannot be undone!")){
    return true;
  } else {
    return false;
  }
}

function WarningUndo(){
  if(confirm("Sure you want to delete? You cannot undo this!")){
    return true;
  } else {
    return false;
  }
}

function WarningUndoIvBite(){
  if(confirm("Sure you want to delete? This will delete all associated code submissions and cannot be undone!")){
    return true;
  } else {
    return false;
  }
}

function ConfirmRedeem(){
  if(confirm("Redeem this Bite for a Token?")){
    return true;
  } else {
    return false;
  }
}

function WarningAccountDelete(){
  if(confirm("Are you sure you want to delete your account? When we delete it you will lose all your data which cannot be undone!")){
    return true;
  } else {
    return false;
  }
}

function WarningUnsub(){
  if(confirm("Are you sure you want to unsubscribe from our Bites of Py? Upon confirmation we will cancel your current Gumroad subscription!")){
    return true;
  } else {
    return false;
  }
}

function saveEditorPrefsConfirm(formId, warn){
  if(warn === true){
    if(confirm("Are you sure you want to update your editor preferences? This refreshes the page so make sure you don't have unsaved code changes!")){
      document.getElementById(formId).submit();
    } else {
      return false;
    }
  } else {
    // submit straigt away
    document.getElementById(formId).submit();
  }
}

function WarningLicenseRevoke(){
  if(confirm("Are you sure you want to revoke this user's license? Their access to the Premium Tier will cease immediately. You will redeem your seat.")){
    return true;
  } else {
    return false;
  }
}

function confirmAction(text){
  if(confirm(text)){
    return true;
  } else {
    return false;
  }
}

function ConfirmViewAnswerStudent(){
  if(confirm("Are you sure you want to see the solution? Your teacher will be able to see that you took a peek at the answer.")){
    return true;
  } else {
    return false;
  }
}

function ConfirmViewAnswer(intro){
  intro = typeof intro !== 'undefined';

  var confirmText = "Are you sure you want to see the solution?\n";

  if(intro === true){
    confirmText += "Relax! No penalty for Intro Bites (regular Bites we do deduct points!)\n";
    confirmText += "Are you sure though you tried everything?\n\n";
    confirmText += "Hit Cancel to keep coding, hit OK to see our solution :)";
  } else {
    confirmText += "Doing so won't get you the full credit :(\n";
    confirmText += "Not the case if you hit Cancel and keep coding :)";
  }

  if(confirm(confirmText)){
    return true;
  } else {
    return false;
  }
}

function CopyCodeToForm(){
  document.getElementById("overlay").style.display = "block";
  var code = editor.getValue();
  document.getElementById("code").value = code;
}

function CopyRunCodeToForm(){
  document.getElementById("overlay").style.display = "block";
  var code = editor.getValue();
  document.getElementById("run_code").value = code;
}

function CopyFlakeCodeToForm(){
  document.getElementById("overlay").style.display = "block";
  var code = editor.getValue();
  document.getElementById("flake_code").value = code;
}

function CopyRadonCodeToForm(){
  document.getElementById("overlay").style.display = "block";
  var code = editor.getValue();
  document.getElementById("radon_code").value = code;
}

function CopyBlackCodeToForm(){
  document.getElementById("overlay").style.display = "block";
  var code = editor.getValue();
  document.getElementById("black_code").value = code;
}

function activateTab(tab){
  scroll(0,0);
  mui.tabs.activate(tab);
}

function ResetToTemplateCode(){
  var answer = confirm("Sure you want to go back to the initial template code?");
  if(answer){
    var code = document.getElementById('template_code').value;
    // document.getElementById("editor").value = code;
    editor.getSession().setValue(code);
  }
  return false;
}

function countDown(endDate, divId, divIdPrepend, showWhenDone, alertMsg){
  var myDiv = document.getElementById(divId)
  myDiv.disabled = true;

  var countDownDate = new Date(endDate).getTime();

  var x = setInterval(function() {

      var now = new Date().getTime();
      var distance = countDownDate - now;

      var days = Math.floor(distance / (1000 * 60 * 60 * 24));
      var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      var seconds = Math.floor((distance % (1000 * 60)) / 1000);

      myDiv.innerHTML = divIdPrepend + days + "d " + hours + "h "
      + minutes + "m " + seconds + "s ";

      if (distance < 0) {
          clearInterval(x);
          myDiv.innerHTML = showWhenDone;
          myDiv.disabled = false;

          // first 5 min past deadline show alert
          if(alertMsg !== "" && distance < 0 && minutes > -5){
            alert(alertMsg);
          }
      }
  }, 1000);
}


function standardModal(text, width, height){
  if(width === null && height === null){
    width = '600';
    height = '600';
  }

  // initialize modal element
  var $modalEl = $('<div/>');

  // set style
  $modalEl.css({
    width: width + 'px',
    height: height + 'px',
    margin: '100px auto',
    padding: '10px 20px',
    backgroundColor: '#f2f2f2'
  });

  // add content
  var $content = $(text);
  $modalEl.append($content);

  // show modal
  mui.overlay('on', $modalEl.get(0));
}

function bitePreview(text){
  var $modalEl = $('<div/>');

  // set style
  $modalEl.css({
    width: '800px',
    height: '600px',
    margin: '50px auto',
    padding: '10px 20px',
    backgroundColor: '#f2f2f2',
    'overflow-y': 'auto'
  });

  // add content
  var $content = $(text);
  $modalEl.append($content);

  // show modal
  mui.overlay('on', $modalEl.get(0));
}

function biteMetrics(text){
  // initialize modal element
  var $modalEl = $('<div/>');

  // set style
  $modalEl.css({
    width: '400px',
    height: '200px',
    margin: '100px auto',
    padding: '10px 20px',
    backgroundColor: '#f2f2f2'
  });

  // add content
  var $content = $(text);
  $modalEl.append($content);

  // show modal
  mui.overlay('on', $modalEl.get(0));

  return false;
}


function gifModal(pic){
  // initialize modal element
  var $modalEl = $('<div/>');

  // set style
  $modalEl.css({
    margin: '65px auto',
    backgroundColor: '#000'
  });

  // add content
  var $gif = $('<img class="flex" style="float: right;" src="' + pic + '">');
  $modalEl.append($gif);

  // show modal
  mui.overlay('on', $modalEl.get(0));
}


function openInNewTab(url) {
  var win = window.open(url, '_blank');
  win.focus();
}


function openInSameTab(url) {
  var win = window.open(url, '_self');
  win.focus();
}


jQuery(function($) {
  var $bodyEl = $('body'),
      $sidedrawerEl = $('#sidedrawer');


  function showSidedrawer() {
    // show overlay
    var options = {
      onclose: function() {
        $sidedrawerEl
          .removeClass('active')
          .appendTo(document.body);
      }
    };

    var $overlayEl = $(mui.overlay('on', options));

    // show element
    $sidedrawerEl.appendTo($overlayEl);
    setTimeout(function() {
      $sidedrawerEl.addClass('active');
    }, 20);
  }


  function hideSidedrawer() {
    $bodyEl.toggleClass('hide-sidedrawer');
  }


  $('.js-show-sidedrawer').on('click', showSidedrawer);
  $('.js-hide-sidedrawer').on('click', hideSidedrawer);

  var $titleEls = $('strong', $sidedrawerEl);

  $titleEls
    .next()
    .hide();

  $titleEls.on('click', function() {
    $(this).next().slideToggle(200);
  });


  /* hide / show panels metrics page */
  var $titleEls = $('strong', $('#bitePanels'));

  $titleEls
    .next()
    .hide();

  $titleEls.on('click', function() {
    $(this).next().slideToggle(200);
  });


  /* avoid double submits */
  $("input[type='submit']").on("click", function (e) {
    $(this).attr("disabled", true);
    $(this).closest("form").submit()
  });

  $(".clipboardCopied").hide();
  $(".copyClipboard").on("click", function(e){
    var cmdBox = $(this).parent().find('.commandBox');
    cmdBox.select();
    document.execCommand("Copy");
    $(".clipboardCopied").show().delay(3000).slideUp();
    return false;
  });

  $("#messages").delay(8000).slideUp();

  $("#pytestOutput").hide();
  $('#showErrors').click(function(e){
    $('#pytestOutput').slideToggle();
    $(this).text( $(this).text() == 'Show pytest output' ? "Hide pytest output" : "Show pytest output");
  });

  $("#feedbackForm").hide();
  $('#feedbackFormToggle').click(function(e){
    $('#feedbackForm').slideToggle();
    $(this).text( $(this).text() == 'Tell us about your experience' ? "Hide feedback form" : "Tell us about your experience");
  });

  $("#noteForm").hide();
  $('#noteFormToggle').click(function(e){
    $('#noteForm').slideToggle();
    $(this).text( $(this).text() == "Your Bite Notes" ? "Hide Bite Notes form" : "Your Bite Notes");
  });

  $("#slackShare").hide();
  $('#slackShareToggle').click(function(e){
    $('#slackExplainText').slideUp(function(){
      $('#slackShare').slideDown();
    });
    $(this).text('Thank you!');
  });

  $("#watchTraining").hide();
  $('#watchTrainingLink').click(function(e){
    $('#watchTraining').slideDown();
  });

  $("#newbieBiteUpgrade").hide();
  $('#enterNewbieLicense').click(function(e){
    $('#newbieBiteUpgrade').slideToggle();
    $(this).text( $(this).text() == 'Enter Newbie license key ...' ? "Hide license form" : "Enter Newbie license key ...");
  });

  $("#createNewProject").hide();
  $('#createNewProjectToggle').click(function(){
    $('#createNewProject').slideDown(function(){
       $("#createNewProjectToggle").hide(function(){
         var btnText = $("#createProjectFromTemplate").text();
         $("#createProjectFromTemplate").text('OR ' + btnText);
       });
    });
  });

  $('.count').each(function () {
      $(this).prop('Counter', 0).animate({
          Counter: $(this).text()
      }, {
          duration: 2000,
          easing: 'swing',
          step: function (now) {
              // https://stackoverflow.com/a/34531093
              $(this).text(Math.ceil(now).toLocaleString('en'));
          }
      });
  });

  $('#id_query').change(function() {
    // redirect in case of testimonial to show extra checkbox
    var box = $(this);
    var option = box.val();
    // make sure we don't wipe out previous content
    var msgContent = $("#composeMessage").val();
    var promptMsg = "You have unsaved changes, are you sure you want to change the message type?"
    if(msgContent !== '' && !confirm(promptMsg)){
      return false;
    }
    var base_url = window.location.href;
    base_url = base_url.substring(0, base_url.indexOf('new'));
    var newurl = base_url + 'new/' + option + '/';
    window.location = newurl;
  });

  $('.consolePane').click(function() {
    // when run code is clicked jump to console div
    var cons = "#console";
    var url = document.location.href;
    if(!url.endsWith(cons)){
      url += cons;
      document.location = url;
    }
  });

  $('.biteOrChallenge').change(function() {
    var box = $(this);
    var exerciseId = box.val();
    var text = box.find('option:selected').text();

    if(text === 'I want more Bites'){
      // if this option is clicked in dropdown redirect to 'what to code' tab
      activateTab('pane-default-3');
      return;
    }

    var typeChallenge = box.attr('class').split(' ')[1];
    var dayInt = $(this).parent().parent().parent().find(".dayInt").html();
    dayInt = parseInt(dayInt);
    var prefix = 'Day ' + dayInt + ': #100DaysOfCode progress: today I worked on ';

    prefix += typeChallenge;
    link = 'http://codechalleng.es/challenges/' + exerciseId + '/';
    if(typeChallenge === 'Bite'){
      prefix += ' ';
      link = 'http://codechalleng.es/bites/' + exerciseId + '/';
    }

    // pybites article
    if(typeChallenge === 'Article'){
      prefix = 'Day ' + dayInt + ': #100DaysOfCode progress: today I read a PyBites article: ';
      link = exerciseId;
    }

    // pycon talk option
    if(typeChallenge === 'Video'){
      var pyconYear = $(this).parent().parent().parent().find(".pyconYear").html();
      pyconYear = parseInt(pyconYear);
      prefix = 'Day ' + dayInt + ': #100DaysOfCode progress: today I watched a #PyCon' + pyconYear + ' talk: ';
      link = 'https://www.youtube.com/watch?v=' + exerciseId;
    }

    var tweet = box.closest('tr').find('td textarea.tweetBox');
    tweet.val(prefix + text + ' ' + link + ' #Python via @pybites');
  });


  $(".bitetipCode").click(function(){
    if ( $(this).height() < 290){
      $(this).css({ overflow: 'visible', });
      $('.mui-caret').css({ transform: 'rotate(180deg)' });
      $(this).animate({ height: 300 }, 500);
    } else {
      $(this).animate({ height: 66 }, 500, function(){
        $(this).css({ overflow: 'hidden', });
        $('.mui-caret').css({ transform: 'none' });
      });
    }
  });

  // toggle message reply edit: https://stackoverflow.com/a/31502697
  $('button.activateEdit').on('click', function(e){
    e.preventDefault();
    var $parent = $(this).closest('.msgBox');
    $parent.find('blockquote.message').hide();
    $parent.find('form.editReplyForm').show();
    $(this).hide();
  });

  $('button.deactivateEdit').on('click', function(e){
    e.preventDefault();
    var $parent = $(this).closest('.msgBox');
    $parent.find('blockquote.message').show();
    $parent.find('form.editReplyForm').hide();
    $parent.find('button.activateEdit').show();
  });

  $('.mui-dropdown__menu li textarea').click(function(e) {
    // prevent textarea click closing dropdown
    e.stopPropagation();
  });

  $('a.matchClick').click(function() {
      var searchMatch = $(this).html();
      $('.searchField').val(searchMatch);
      return false;
  });

  // user anchors - https://stackoverflow.com/a/41121797
  $('.linkScroll a[href^="#"]').click(function(e) {
      var aid = $(this).attr("href");
      var idx = aid.replace('#', '');
      if(isNaN(idx) === true){
        // if number populate url, if name don't
        e.preventDefault();
      }
      $('html,body').animate({scrollTop: $(aid).offset().top - 80 }, 'slow');
      $(aid).addClass('unread_animation');
  });

  // scroll to anchors
  var hasAnchor = window.location.href.match(/#.+$/);
  if(hasAnchor !== null){
    var aid = hasAnchor[0];
    var offset = $(aid).offset();
    if(offset === undefined){
      return;
    }
    $('html,body').animate({scrollTop: offset.top - 80 }, 'slow');
    // for certificate navigation animate the previously generated links
    if(aid === '#certificateGenerated'){
      $('#userCertificates').addClass('unread_animation');
    }
  }

  $('.biteIdea').click(function(e) {
    $('.biteRequestWrapper').addClass('unread_animation');
  });

  $("#progressLoader").hide();
  $('.showProgressLoader').click(function(e) {
    $(this).slideUp();
    $("#progressLoader").show();
  });

  // metrics
  $('#metricsDiv').hide();
  $('#showBiteMetrics').click(function(e) {
    $(this).slideUp(function(){
      $('#metricsDiv').slideDown();
    });
  });

  // translations
  $('#translationDiv').hide();
  $('#showTranslations').click(function(e) {
    $(this).slideUp(function(){
      $('#translationDiv').slideDown();
    });
  });

  // share buttons
  $('#shareButtonsDiv').hide();
  $('#showShareButtons').click(function(e) {
    $(this).slideUp(function(){
      $('#shareButtonsDiv').slideDown();
    });
  });

  // prevent wiping out share code upon upvote
  $('.voteAction').click(function(e) {
    var reply = $('textarea#reply').val();
    if(reply !== ''){
      alert('You have an unfinished post, please complete it first before voting.');
      return false;
    }
  });

});


/* auto-expanding textareas with vanilla JS:
   https://jsfiddle.net/cferdinandi/mqwwpL6u/ */

var autoExpand = function (field) {
  // Reset field height
  field.style.height = 'inherit';

  // Get the computed styles for the element
  var computed = window.getComputedStyle(field);

  // Calculate the height
  var height = parseInt(computed.getPropertyValue('border-top-width'), 10)
              + parseInt(computed.getPropertyValue('padding-top'), 10)
              + field.scrollHeight
              + parseInt(computed.getPropertyValue('padding-bottom'), 10)
              + parseInt(computed.getPropertyValue('border-bottom-width'), 10);

  field.style.height = height + 'px';
};

document.addEventListener('input', function (event) {
  if (event.target.tagName.toLowerCase() !== 'textarea') return;
  autoExpand(event.target);
}, false);


function sortTable(n, divId) {
  /* https://www.w3schools.com/howto/howto_js_sort_table.asp */
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(divId);
  switching = true;
  // Set the sorting direction to ascending:
  dir = "asc";
  /* Make a loop that will continue until
  no switching has been done: */
  while (switching) {
    // Start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /* Loop through all table rows (except the
    first, which contains table headers): */
    for (i = 1; i < (rows.length - 1); i++) {
      // Start by saying there should be no switching:
      shouldSwitch = false;
      /* Get the two elements you want to compare,
      one from current row and one from the next: */
      x = rows[i].getElementsByTagName("td")[n];
      y = rows[i + 1].getElementsByTagName("td")[n];
      /* Check if the two rows should switch place,
      based on the direction, asc or desc: */
      if (dir == "asc") {
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      } else if (dir == "desc") {
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /* If a switch has been marked, make the switch
      and mark that a switch has been done: */
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      // Each time a switch is done, increase this count by 1:
      switchcount ++;
    } else {
      /* If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again. */
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}

// save and test upon control + enter
// https://stackoverflow.com/a/2511474
// define a handler
function doc_keyUp(e) {
    // https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes
    var save = document.getElementById('save_only');
    var test = document.getElementById('save');

    // only apply shortcuts when we are on a bite page
    if(test === null){
      return
    }

    var run = document.getElementById('runCodeSubmit');
    var flake = document.getElementById('flakeSubmit');
    var black = document.getElementById('blackSubmit');

    var shortcut = e.ctrlKey && e.shiftKey;

    // key codes: https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes
    var sClicked = e.keyCode == 83; // s
    var tClicked = e.keyCode == 84; // t
    var rClicked = e.keyCode == 82; // r
    var fClicked = e.keyCode == 70; // f
    var bClicked = e.keyCode == 66; // b

      // all shortcuts are with ctrl + shift to avoid default browser or OS actions
    if (shortcut && sClicked) save.click();
    if (shortcut && tClicked) test.click();
    if (shortcut && rClicked) run.click();
    if (shortcut && fClicked) flake.click();
    if (shortcut && bClicked) black.click();
}
// register the handler
document.addEventListener('keyup', doc_keyUp, false);
